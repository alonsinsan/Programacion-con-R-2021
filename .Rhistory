a <- c("Henry", "Antonio","Iván", "Gerardo", "Daniel", "Juan", "Mariana")
a <- c("Henry", "Antonio","Iván", "Gerardo", "Daniel", "Juan", "Mariana","Jose Carlo")
sample(a,8)
?pivot_longer
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021")
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-02")
x = c(4000, 9000, 9000, 10000); mean(x)
median(x)
library(DescTools)
Mode(x) # mode es diferente de Mode (Case sensitive)
x = c(4000, 9000.01, 9000, 10000); mean(x)
median(x)
Mode(x) # mode es diferente de Mode (Case sensitive)
x <- c(29, 13, 62, 4, 63, 96, 1, 90, 50, 46)
quantile(x, 0.25) # cuantil del 25%
quantile(x, c(0.25,0.50,0.75)) # Cuartiles
median(x)
quantile(x, seq(0.1,0.9, by = 0.1)) # Deciles
quantile(x, seq(0.01, 0.99, by = 0.01)) # Percentiles
IQR(x)
quantile(x, probs = 0.75) - quantile(x, probs = 0.25)
var(x)
sd(x)
x = c(4000, 9000.01, 9000, 10000); mean(x)
median(x)
x = c(4000, 9000, 9000, 10000); mean(x)
median(x)
x = c(4000, 9000.01, 9000, 10000); mean(x)
median(x)
Mode(x) # mode es diferente de Mode (Case sensitive)
x <- c(29, 13, 62, 4, 63, 96, 1, 90, 50, 46)
quantile(x, c(0.25,0.50,0.75)) # Cuartiles
quantile(x, seq(0.1,0.9, by = 0.1)) # Deciles
quantile(x, seq(0.01, 0.99, by = 0.01)) # Percentiles
IQR(x)
quantile(x, probs = 0.75) - quantile(x, probs = 0.25)
var(x)
sd(x)
str(iris)
summary(1:100)
summary(mtcars)
set.seed(57)
x <- rnorm(35)
e <- rnorm(35)
y <- 5 + 2*x + e
plot(x,y)
modelo <- lm(y~x)
summary(modelo)
head(mtcars)
tail(mtcars)
View(iris)
moda <- function(vector){
f.abs <- table(vector) # frecuencias absolutas
max.f.abs <- max(f.abs) # obtenemos la mC!xima frecuencia absoluta
pos.max <- which(f.abs == max.f.abs) # posiciC3n(es) de la(s) mC!xima(s) frecuencia(s) absoluta(s)
print("La(s) moda(s) es(son): ")
print(names(f.abs[pos.max]))
paste("Con una frecuencia de: ", unique(as.vector(f.abs[pos.max])))
}
View(moda)
x <- sample(1:100, 100, replace = T) # Tomamos una muestra aleatoria de tamaC1o 100 con reemplazo de los primeros 100 nC:meros naturales
table(x) # obtenemos las frecuencias absolutas de los valores de la muestra
moda(x) # obtenemos la moda de los valores de la muestra
y <- sample(1:1000, 1000, replace =T)
moda(y)
library(dplyr)
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-02/Ejemplo-03")
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv(url2)
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
download.file(url = url2, destfile = "st19ncov-muertes.csv", mode = "wb")
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv("st19ncov-muertes.csv")
View(conf)
str(conf); str(mu)
head(conf); head(mu)
View(conf)
Sconf <- conf[-1,]
Smu <- mu[-1,]
View(Sconf)
Sconf <- Sconf %>%
select(Country.Region, Date, Value)
Sconf <- conf[-1,]
Sconf1 <- Sconf %>%
select(Country.Region, Date, Value)
Sconf2 <- Sconf %>%
select(Country.Region, Date, Value) %>%
rename(Pais = Country.Region, Fecha = Date, Infectados = Value)
Sconf3 <- Sconf %>%
select(Country.Region, Date, Value) %>%
rename(Pais = Country.Region, Fecha = Date, Infectados = Value) %>%
mutate(Fecha = as.Date(Fecha, "%Y-%m-%d"), Infectados = as.numeric(Infectados))
View(Sconf3)
Smu3 <- Smu %>%
select(Country.Region, Date, Value) %>%
rename(Pais = Country.Region, Fecha = Date, Muertos = Value) %>%
mutate(Fecha = as.Date(Fecha, "%Y-%m-%d"), Muertos = as.numeric(Muertos))
Scm <- merge(Sconf, Smu) # Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf3, Smu3) # Unimos infectados y muertos acumulados para cada fecha
View(Scm)
View(Sconf3)
Scm <- merge(Sconf3, Smu3, by.x = c("Pais", "Fecha"), by.y = c("Pais", "Fecha"), all = F) # Unimos infectados y muertos acumulados para cada fecha
# o
mex <- Scm %>%
filter(Pais == "Mexico", Infectados != 0)
View(mex)
View(mex)
View(mex)
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por dC-a
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por dC-a
View(mex)
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
View(mex)
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores dC-a anterior
View(mex)
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # DC-as de contingencia
View(mex)
write.csv(mex, "C19Mexico.csv", row.names = FALSE)
getwd()
library(dplyr)
# vamos a trbajar con el dataset de iris
attach(iris)
# vamos a trbajar con el dataset de iris
iris - attach(iris)
# vamos a trbajar con el dataset de iris
iris <- attach(iris)
View(iris)
# vamos a trbajar con el dataset de iris
View(iris)
# vamos a trbajar con el dataset de iris
View(iris)
library(dplyr)
# vamos a trbajar con el dataset de iris
View(iris)
# group by - summarize
resultados <- iris %>%
group_by(Species) %>%
summarize(media_petal_length = mean(Petal.Length))
View(resultados)
# group by - summarize
resultados <- iris %>%
group_by(Species) %>%
summarize(media_petal_length = mean(Petal.Length)
, sd_sepal_width = sd(Sepal.Width))
View(resultados)
# group by - summarize
resultados <- iris %>%
group_by(Species) %>%
summarize(media_petal_length = mean(Petal.Length)
, sd_petal_length = sd(Petal.Length)
, sd_sepal_width = sd(Sepal.Width))
View(resultados)
cbind(1:10, 11:20, 21:30)
cbind(1:10, matrix(11:30, ncol =2))
cbind(data.frame(x = 1:10, y = 11:20), z = 21:30)
df1 <- data.frame(x = 1:5, y = 6:10, z = 16:20)
df2 <- data.frame(x = 51:55, y = 101:105, z = 151:155)
df1; df2
rbind(df1, df2)
# estas funciones también existen en dplyr bind_rows, bind_cols
df1 <- data.frame(x = 1:5, y = 6:10, z = 16:20)
df2 <- data.frame(x = 51:55, y = 101:105, a = 151:155)
rbind(df1,df2)
bind_rows(df1,df2)
View(df1)
X <- matrix(1:49, ncol = 7)
X
# en lugar del for anterior
apply(X, 1, mean) # cálculo de la media para las filas
apply(X, 2, median) # cálculo de la mediana para las columnas
X <- data.frame(matrix(1:49, ncol = 7))
View(X)
# en lugar del for anterior
apply(X, 1, mean) # cálculo de la media para las filas
apply(X, 2, median) # cálculo de la mediana para las columnas
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-02/Ejemplo-05")
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
download.file(url = u1011, destfile = "SP1-1011.csv", mode = "wb")
download.file(url = u1112, destfile = "SP1-1112.csv", mode = "wb")
download.file(url = u1213, destfile = "SP1-1213.csv", mode = "wb")
download.file(url = u1314, destfile = "SP1-1314.csv", mode = "wb")
dir()
files <- list.files(pattern = "*.csv")
files
lista <- lapply(files, read.csv) # Guardamos los archivos en lista
View(lista)
View(lista)
lista <- lapply(lista, select, Date:FTR) # seleccionamos solo algunas columnas de cada data frame
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]); head(lista[[4]])
data <- do.call(rbind, lista) #también bind_rows
View(data)
head(airquality)
library(dplyr)
str(airquality)
dim(airquality)
summary(airquality)
bien <- complete.cases(airquality)
bien
View(airquality)
airquality[bien]
airquality[bien,]
sum(bien) # F = 0 y T =1
mean(bien)
data <- select(airquality, Ozone:Temp)
apply(data, 2, mean)
apply(data, 2, mean, na.rm = T)
(m1 <- apply(na.omit(data), 2, mean))
(m2 <- apply(data[b,], 2, mean))
b <- complete.cases(data)
(m2 <- apply(data[b,], 2, mean))
identical(m1, m2)
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021")
