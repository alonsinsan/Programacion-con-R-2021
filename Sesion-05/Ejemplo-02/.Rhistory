a <- c("Henry", "Antonio","Iván", "Gerardo", "Daniel", "Juan", "Mariana")
a <- c("Henry", "Antonio","Iván", "Gerardo", "Daniel", "Juan", "Mariana","Jose Carlo")
sample(a,8)
?pivot_longer
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-05/Ejemplo-01")
production <- read.table("production.txt", header = TRUE)
View(production)
attach(production)
library(ggplot2)
ggplot(production) +
geom_point(aes(x = RunSize, y = RunTime)) +
ggtitle("Tiempos de ejecución por tamaño de lote") +
xlab("Tamaño de ejecución") +
yñab("Tiempo de ejecución")
ggplot(production) +
geom_point(aes(x = RunSize, y = RunTime)) +
ggtitle("Tiempos de ejecución por tamaño de lote") +
xlab("Tamaño de ejecución") +
ylab("Tiempo de ejecución")
m1 <- lm(RunTime~RunSize, data = production) # RunTime = m*RunSize + b
View(m1)
summary(m1)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresión estimada
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
View(m1)
text(x = 200, y = 240, expression(paste('Recta de regresión:',
' ',
y[i] == beta[0] + beta[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 180, expression(paste('Recta estimada:',
' ',
hat(y)[i] == hat(beta)[0] + hat(beta)[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 160, expression(paste('Recta estimada:',
' ',
hat(y)[i] == 149.74770 + 0.25924*x[i])),
adj = 1, font = 2)
points(189, 215, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 189 # Valor y sobre la recta estimada
lines(c(189, 189), c(198.7441, 215), col = "red")
ggplot(production, aes(x = RunSize, y = RunTime)) +
geom_point() +
geom_smooth(method = "lm")
round(confint(m1, level = 0.95), 3)
summary(lm)
summary(ml)
summary(m1)
round(confint(m1, level = 0.95), 3)
RunSize0 <- c(50,100,150,200,250,300,350) # Algunos posibles valores de RunSize
new_df <- data.frame(RunSize = RunSize0)
View(new_df)
(conf <- predict(m1, newdata = new_df,
interval = "confidence", level = 0.95))
anova(m1)
summary(m1)
par(mfrow = c(2, 2))
plot(m1)
ggplot(production) +
geom_point(aes(x = RunSize, y = RunTime)) +
ggtitle("Tiempos de ejecución por tamaño de lote") +
xlab("Tamaño de ejecución") +
ylab("Tiempo de ejecución")
ggplot(production) +
geom_point(aes(x = RunSize, y = RunTime)) +
ggtitle("Tiempos de ejecución por tamaño de lote") +
xlab("Tamaño de ejecución") +
ylab("Tiempo de ejecución")
max(production$RunSize)
new_df_adelante <- data.frame(RunSize= c(600,700,800))
predict(m1, new_df_adelante, interval ="confidence", 0.95)
s1 <- predict(m1, new_df_adelante, interval ="confidence", 0.95)
View(s1)
s1$fit
summary(m1)
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-05/Ejemplo-02")
nyc <- read.csv("nyc.csv", header = TRUE)
View(nyc)
summary(nyc)
m1 <- lm(Price ~ Food + Decor + Service + East, data = nyc)
summary(m1)
m2 <- lm(Price ~ Food + Decor + East, data = nyc)
summary(m2)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
summary(mfull)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East, data = nyc)
summary(mfull)
anova(m2,mfull)
pairs(~ Food + Decor + Service, data = nyc, gap = 0.4, cex.labels = 1.5)
plot(m2)
m1 <- lm(Price ~ Food + Decor + Service + East)
summary(m1)
StanRes1 <- rstandard(m1)
par(mfrow = c(2, 2))
plot(Food, StanRes1, ylab = "Residuales Estandarizados")
plot(nyc$Food, StanRes1, ylab = "Residuales Estandarizados")
plot(nyc$Food, StanRes1, ylab = "Residuales Estandarizados")
plot(nyc$Decor, StanRes1, ylab = "Residuales Estandarizados")
plot(nyc$Service, StanRes1, ylab = "Residuales Estandarizados")
plot(nyc$East, StanRes1, ylab = "Residuales Estandarizados")
dev.off()
par(mfrow = c(2, 2))
plot(nyc$Food, StanRes1)#, ylab = "Residuales Estandarizados")
plot(nyc$Decor, StanRes1)#, ylab = "Residuales Estandarizados")
plot(nyc$Service, StanRes1)#, ylab = "Residuales Estandarizados")
plot(nyc$East, StanRes1)#, ylab = "Residuales Estandarizados")
dev.off()
par(mfrow = c(2, 2))
plot(nyc$Food, StanRes1)#, ylab = "Residuales Estandarizados")
plot(nyc$Decor, StanRes1)#, ylab = "Residuales Estandarizados")
plot(nyc$Service, StanRes1)#, ylab = "Residuales Estandarizados")
plot(nyc$East, StanRes1)#, ylab = "Residuales Estandarizados")
plot(m1$fitted.values, Price, xlab = "Valores ajustados", ylab = "Price")
plot(m1$fitted.values, nyc$Price, xlab = "Valores ajustados", ylab = "Price")
dev.off()
plot(m1$fitted.values, nyc$Price, xlab = "Valores ajustados", ylab = "Price")
abline(lsfit(m1$fitted.values, Price))
abline(lsfit(m1$fitted.values, nyc$Price))
?seq
# Ejemplo con fechas
datos <- data.frame(fecha = seq(as.Date("2024-01-01"), length.out = 180, by ="day"),
precio = rnorm(180, 173,10))
# Ejemplo con fechas
datos <- data.frame(fecha = seq(as.Date("2024-01-01"), length.out = 180, by ="day"),
precio = rnorm(180, 173,10))
View(datos)
modelo <- lm(precio~fecha, data =datos)
ggplot(datos, aes(x=fecha, y = precio)) +
geom_point()+
geom_smooth(method = "lm")
ggplot(datos, aes(x=fecha, y = precio)) +
geom_line(aes(group = 1))+
geom_smooth(method = "lm")
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(e1071)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(ISLR)))
?Default
head(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
dim(Default)
set.seed(2020)
train = sample(nrow(Default),
round(nrow(Default)/2))
Default[train, ]
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
best <- svm(default~.,  data = Default[train,],
kernel = "radial",
cost = 100,
gamma = 1.51
)
View(best)
mc <- table(true = Default[-train, "default"],
pred = predict(best,
newdata = Default[-train,]))
mc
Default[-train, "default"]
mc
4803+49
4852/5000
round(sum(diag(mc))/sum(colSums(mc)), 5)
fit <- svm(default ~ ., data = Default[train,],
kernel = "radial", cost = 100, gamma = 1.51,
decision.values = TRUE)
fitted <- attributes(predict(fit, Default[-train,],
decision.values = TRUE))$decision.values
View(fitted)
View(fitted)
boxplot(fitted)
eti <- ifelse(fitted < 0, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
eti <- ifelse(fitted < 1.002, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
Default[-train,]
train = sample(nrow(Default),
round(nrow(Default)/2))
Default[-train,]
predict(best,
newdata = Default[-train,]
)
best <- svm(default~.,  data = Default[train,],
kernel = "radial",
cost = 100,
gamma = 1.51
)
predict(best,
newdata = Default[-train,])
