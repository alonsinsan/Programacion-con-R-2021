setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-05")
getwd()
production <- read.table("Ejemplo-01/production.txt", header = TRUE)
View(production)
attach(production)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
library(ggplot2)
ggplot(production) +
geom_point(aes(x=RunSize, y = RunTime))
ggplot(production) +
geom_point(aes(x=RunSize, y = RunTime)) +
ggtitle("Tamaño de ejecución vs Tiempo de ejecución")
m1 <- lm(RunTime~RunSize)
View(m1)
summary(m1)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresión estimada
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
text(x = 200, y = 240, expression(paste('Recta de regresión:',
' ',
y[i] == beta[0] + beta[1]*x[i])),
adj = 1, font = 2)
# gráfica de ggplot
ggplot(production) +
geom_point(aes(x=RunSize, y =RunTime)) +
geom_smooth()
# gráfica de ggplot
ggplot(production) +
geom_point(aes(x=RunSize, y =RunTime)) +
geom_smooth(RunTIme~RunSize)
# gráfica de ggplot
ggplot(production) +
geom_point(aes(x=RunSize, y =RunTime)) +
geom_smooth(aes(RunTIme~RunSize))
?geom_smooth
# gráfica de ggplot
ggplot(production) +
geom_point(aes(x=RunSize, y =RunTime)) +
geom_smooth(method = lm, formula= RunTime~RunSize)
# gráfica de ggplot
ggplot(production, aes(x=RunSize, y =RunTime)) +
geom_point() +
geom_smooth(method = lm, formula= RunTime~RunSize)
# gráfica de ggplot
ggplot(production, aes(x=RunSize, y =RunTime)) +
geom_point() +
geom_smooth(method = lm, se = F)
points(189, 215, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 189 # Valor y sobre la recta estimada
lines(c(189, 189), c(198.7441, 215), col = "red")
points(173, 166, pch=16, col = "red") # Punto muestral
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresión estimada
points(189, 215, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 189 # Valor y sobre la recta estimada
lines(c(189, 189), c(198.7441, 215), col = "red")
points(173, 166, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 173 # Valor y sobre la recta estimada
lines(c(173, 173), c(166, 194.5962), col = "red")
par(mfrow = c(2, 2))
plot(m1)
datos <- read.csv("Reto-01/datoslineal.csv")
attach(datos)
plot(x, y, main = "Gráfico de dispersión") # 1
plot(x, y, main = "Gráfico de dispersión") # 1
plot(x, y, main = "Gráfico de dispersión") # 1
modelo <- lm(y ~ x) # 2.
summary(modelo)
abline(lsfit(x, y))
par(mfrow = c(2, 2))
plot(modelo) # 3.
View(datos)
nyc <- read.csv("Ejemplo-02/nyc.csv", header = TRUE)
View(nyc)
head(nyc, 2); tail(nyc, 2); dim(nyc)
# Primero debemos establecer nuestro directorio de trabajo y el archivo
# de datos (nyc.csv) que importaremos a R deberá de estar en este directorio
library(dplyr)
plot(nyc %>%
select(Price, Food, Decor, Service, East))
cor(nyc %>%
select(Price, Food, Decor, Service, East))
a <- cor(nyc %>%
select(Price, Food, Decor, Service, East))
View(a)
View(a)
# Llevamos a cabo el ajuste de un modelo
# Y = beta0 + beta1*Food + beta2*Decor + beta3*Service + beta4*East + e
otrodf <- nyc %>%
select(Price, Food, Decor, Service, East)
View(otrodf)
?lm
m1 <- lm(Price~., data = otrodf)
summary(m1)
# Price = b0 + b1*Food + b2*Decor + b3*Service +b4*East + e
m2 <- lm(Price~Food+Decor)
# Price = b0 + b1*Food + b2*Decor + b3*Service +b4*East + e
m2 <- lm(Price~Food+Decor, data = nyc)
summary(m2)
View(nyc)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East, data = nyc)
summary(mfull)
anova(m2,mfull)
par(mfrow = c(2, 2))
plot(Food, StanRes1, ylab = "Residuales Estandarizados")
plot(Decor, StanRes1, ylab = "Residuales Estandarizados")
plot(Service, StanRes1, ylab = "Residuales Estandarizados")
plot(East, StanRes1, ylab = "Residuales Estandarizados")
par(mfrow = c(2, 2))
plot(m2)
plot(m2$fitted.values, Price, xlab = "Valores ajustados", ylab = "Price")
abline(lsfit(m1$fitted.values, Price))
View(m2)
install.packages('ISLR')
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(e1071)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(ISLR)))
?Default
head(Default)
tail(Default)
dim(Default)
str(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
set.seed(2020)
train = sample(nrow(Default),
round(nrow(Default)/2))
tail(Default[train, ])
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
best <- svm(default~.,  data = Default[train,],
kernel = "radial",
cost = 100,
gamma = 1.51
)
mc <- table(true = Default[-train, "default"],
pred = predict(best,
newdata = Default[-train,]))
mc
+4803+49
4852/500
4852/5000
fit <- svm(default ~ ., data = Default[train,],
kernel = "radial", cost = 100, gamma = 1.51,
decision.values = TRUE)
fitted <- attributes(predict(fit, Default[-train,],
decision.values = TRUE))$decision.values
eti <- ifelse(fitted < 0, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
View(fitted)
eti <- ifelse(fitted < 1.002, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
plot(best)
plot.svm(best)
tune.rad = tune(svm, default~., data = Default[train,],
kernel = "radial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
gamma = seq(0.01, 10, 0.5)
)
)
