setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-07")
library(DBI)
library(RMySQL)
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
View(MyDataBase)
dbListTables(MyDataBase)
dbListFields(MyDataBase, 'City')
DataDB <- dbGetQuery(MyDataBase, "select * from City")
View(DataDB)
class(DataDB)
head(DataDB)
pop.mean <- mean(DataDB$Population)  # Media a la variable de población
pop.mean
summary(DataDB)
library(dplyr)
pop50.mex <-  DataDB %>%
filter(CountryCode == "MEX" ,  Population > 50000)   # Ciudades del país de México con más de 50,000 habitantes
View(pop50.mex)
pop50.mex <-  DataDB %>%
filter(CountryCode == "MEX" ,  Population > 50000) %>%
arrange(-Population)# Ciudades del país de México con más de 50,000 habitantes
View(pop50.mex)
#################################################################################
dbListFields(MyDataBase, 'City')
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
#################################################################################
dbListFields(MyDataBase, 'City')
dbListFields(MyDatabase, 'Country')
dbListFields(MyDataBase, 'Country')
dbListFields(MyDataBase, 'CountryLanguage')
# Camino 1
# Jalo cada una de las tablas y tengo mis dfs que asemejan a cada tabla
city <- dbGetQuery(MyDataBase, "select * from City")
country <- dbGetQuery(MyDataBase, "select * from Country")
langauge <- dbGetQuery(MyDataBase, "select * from CountryLanguage")
View(country)
View(langauge)
language <- dbGetQuery(MyDataBase, "select * from CountryLanguage")
View(language)
View(country)
lenguaje_por_pais <- language %>%
filter(IsOfficial == "T") %>%
merge(country, by.x = "CountryCode", by.y = "Code", all.y=T)
View(lenguaje_por_pais)
lenguaje_por_pais <- language %>%
filter(IsOfficial == "T") %>%
merge(country, by.x = "CountryCode", by.y = "Code", all.y=T) %>%
mutate(poblacionLenguajeOficial = (Percentage/100)*Population) %>%
group_by(Name) %>%
summarize(poblacionLenguajeOficial = sum(poblacionLenguajeOficial))
View(lenguaje_por_pais)
View(country)
View(language %>% filter(CountryCode == "AGO"))
data_merge <- dbGetQuery(MyDataBase, query)
# Camino 2
# Hago un query, que haga los cruces necesarios
query <- "SELECT c.*, l.*
FROM Country c
LEFT JOIN CountryLanguage l
ON c.CODE = l.CountryCode
WHERE l.IsOfficial = 'T';"
data_merge <- dbGetQuery(MyDataBase, query)
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
data_merge <- dbGetQuery(MyDataBase, query)
View(data_merge)
camino2 <- data_merge %>%
mutate(poblacionLenguajeOficial = (Percentage/100)*Population) %>%
group_by(Name) %>%
summarize(poblacionLenguajeOficial = sum(poblacionLenguajeOficial))
boxplot(city$Population)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
library(dbplyr)
library(pool)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
View(my_db)
dbListTables(my_db)
my_db %>% tbl("Country") %>% head(5) # library(dplyr)
my_db %>% tbl("CountryLanguage") %>% head(5)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch
dbFetch(rs)
dbGetQuery(conn, "select * from Country limit 5")# library(dplyr)
dbGetQuery(conn, "select * from City limit 5")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(conn)
?read.csv
install.packages('rjson')
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
library(rjson)            # Quitar comillas del nombre
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
View(JsonData)
class(JsonData)                     # Vemos que tipo de objeto es JsonData
str(JsonData)                       # Vemos la naturaleza de sus variables
JsonData$Pets
JsonData$Address
JsonData$Address$`current Address`
JsonData$Mobile
View(JsonData)
sqrt(JsonData$Mobile)
JsonData[["Mobile"]]
JsonData[["Sqrt Mobile"]] <- sqrt(JsonData$Mobile)
View(JsonData)
# install.packages("XML")
library(XML)
install.packages('XML')
# install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
View(xmlfile)
summary(xmlfile)
head(xmlfile)
#Extraer los valores xml
topxml <- xmlSApply(xmlfile, function(x) xmlSApply(x, xmlValue))
View(topxml)
View(topxml)
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
str(xml_df) # Observar la naturaleza de las variables del DF
View(xml_df)
View(xml_df)
data_df <- xmlToDataFrame(link)
View(data_df)
View(topxml)
View(xmlfile)
# install.packages("rvest")
library(rvest)
install.packages('rvest')
# install.packages("rvest")
library(rvest)
theurl <- "https://solarviews.com/span/data2.htm"
file <- read_html(theurl)    # Leemos el html
View(file)
# Selecciona pedazos dentro del HTML para identificar la tabla
summary(file)
str(file)
tables <- html_nodes(file, "table")
View(tables)
View(tables)
table1 <- html_table(tables[4], fill = TRUE)
View(table1)
table <- na.omit(as.data.frame(table1))   # Quitamos NA´s que meten filas extras
View(table)
View(tables)
View(file)
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
View(file)
tables<-html_nodes(file, "table")
View(tables)
table1 <- html_table(tables[1], fill = TRUE)
View(table1)
table <- na.omit(as.data.frame(table1))
View(table)
View(table)
tables<-html_nodes(file, "table")
table1 <- html_table(tables[1], fill = TRUE)
