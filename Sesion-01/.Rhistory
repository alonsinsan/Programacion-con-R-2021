setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021")
?read.csv
(var.hola <- "Hola Mundo")
(var.number <- 5L)
(var.number2 <- 5)
var.number == var.number2
var.number3 <- 625L
(var.double <- 2.7076)
(var.double <- 2.70761384912731723172634172318237812739139812398127181)
(var.logical <- T)
if var.logical
if( var.logical)
print("Si")
(vector <- c(1,2))
class(var.number)
class(var.number2)
class(var.number3)
class(var.hola)
class(var.double)
class(var.logical)
class(var.logical)
typeof(var.logical)
a <- c(4, 6, 8, 10,12)
b <- c(3, 5, 7, 9)
length(a)
length(b)
a[1]
b[4]
c(a,b)
d <- c(a,b)
d <- c(c('1','2','3'), c(1,2,3))
sort(c(a,b), decreasing = F)
sort(c(a,b), decreasing = T)
3:12  # así de sencillo es
f <- 1:100
10:1
1:1000
0:10
0:10:2
(vector.by2 <- seq(from = 1, to = 10, by =2))
?seq
seq(1.575, 5.125, by = 0.05)
rep(5, times = 6)
rep(5, times = 6)
rep(a, 2)
c(rep(a, 2),rep(b, 3))
c(1, 2) + c(7, 8, 9, 10)
a + b
a - b
a*b
a/b
a^2
a1 <- a*0.5 + b^2
a1[1]
as.Date('2024-04-29')
f <-as.Date('2024-04-29')
f <-as.Date.POSIXct('2024-04-29')
d[1] +d[2]
(m <- matrix(1:9, nrow = 3, ncol = 3))
(m <- matrix(1:9, nrow = 3, ncol = 3, byrow = T))
m[1,1]
m[ ,1]
(sum.vecmat <- c(1, 2) + m)
(n <- matrix(2:7, 4, 6))
dim(n)
n[n > 4]
which(n > 4)
a <- 2:6
b <- 5:9
cbind(a,b)
rbind(a,b)
apply(n, 1, mean)
n
(2+6+4+2+6+4)/6
apply(n, 2, sort)
apply(n, 2, mean)
mean(n)
m <- matrix(3:5,(4,6))
m <- matrix(3:5,4,6)
# Producto matricial: A %*% B
n%%m
n*m
# Producto elemento a elemento: A*B
# Traspuesta: t(A)
t(n)
# Determinante: det(A)
det(n)
m <- matrix(3:5,4,4)
# Determinante: det(A)
det(m)
m
# Extraer la diagonal: diag(A)
diag(m)
# Inversa: solve(A)
solve(n)
# Inversa: solve(A)
solve(m)
# Autovalores y autovectores: eigen(A)
eigen(m)
(milista <- list(nombre = "Pepe", no.hijos = 3, edades.hijos = c(4, 7, 9)))
(milista <- list(nombre = "Pepe", no.hijos = 3, edades.hijos = c(4, 7, 9)))
View(milista)
milista$nombre
milista["nombre"]
str(milista)
x <- 6:8
y <- c("A", "B", "C")
(mifile <- data.frame(edad = x, grupo = y))
str(mifile)
mifile[1]
mifile[,1]
mifile$edad
mean(mifile$edad)
paste("La media de la edad es:", mean(mifile$edad))
summary(mifile)
as.factor(mifile$grupo)
dim(mifile)
mifile$sexo <- c("H", "M", "H")
mifile
mifile$sexo <- NULL
mifile
lista1 <- list(listaPrueba = milista, dfPrueba = mifile)
View(lista1)
getwd()
setwd("~/personal/BEDU/Programacion con R/Programacion-con-R-2021/Sesion-01")
read.csv("bestsellers with categories.csv") # El archivo csv debe estar en el directorio de trabajo
amazon.books <- read.csv("Data/bestsellers with categories.csv")
amazon.books <- read.csv("Data/bestsellers with categories.csv")
View(amazon.books)
tail(amazon.books); str(amazon.books)
summary(amazon.books)
data.url <- read.csv("https://www.football-data.co.uk/mmz4281/2021/SP1.csv")
View(data.url)
tail(data.url); str(data.url)
dim(amazon.books)
class(amazon.books)
?read.csv
View(amazon.books)
install.packages("ggplot2") #siempre lleva  comillas
install.packages('beepr')
library(ggplot2) # Se omite el uso de las comillas
library(ggplot2) # Se omite el uso de las comillas
install.packages("dplyr")
library(dplyr)
version
install.packages("lubridate")
# También se puede realizar esta acción en la pestaña de Packages, intentalo.
install.packages('readxl')
beepr::beep()
?beep
beepr::beep('mario')
w <- rnorm(20)
wsq <- 0
wsq <- c()
for(i in 1:10) {
wsq[i] <- w[i]**2
print(wsq[i])
}
for(i in 1:10:2) {
wsq[i] <- w[i]**2
print(wsq[i])
}
for(i in 1:10) {
wsq[i] <- w[i]**2
print(wsq[i])
}
for(i in 1:20) {
wsq[i] <- w[i]**2
print(wsq[i])
}
w^2
for(i in 1:10) {
wsq[i] <- w[i]**2
print(wsq[i])
}
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
x <- runif(1, 0, 10) ## creamos un número aleatorio entre 0 y 10
if(x > 5) {
y <- TRUE
} else {
y <- FALSE
}
x; y
w[1:10]^2
netflix <-read.csv("https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv")
View(netflix)
netflix <- read.csv("Data/netflix_titles.csv")
# dimensión del data frame
dim(netflix)
class(netflix)
net.2015 <- netflix[netflix$release_year > 2015, ]
View(net.2015)
# escritura del archivo
write.csv(net.2015, "res.netflix.csv", row.names = F)
amazon.best <- read.csv("bestsellers with categories.csv")
amazon.best <- read.csv("Data/bestsellers with categories.csv")
# Convirtiendo el DF a transpuesto y en un data frame
tAmazon <- as.data.frame(t(amazon.best))
View(tAmazon)
View(tAmazon)
# Usando el nombre de los libros como el nombre de las columnas
colnames(tAmazon) <- tAmazon[1,]
View(tAmazon)
row.names(tAmazon)
# libro con mayor precio
which.max(tAmazon["Price",])
# libro con menor precio
which.min(tAmazon["Price",])
ran <- rnorm(44)
ran <- runif(44,0,10)
# creando el loop que eleva al cubo y suma 12 a cada posición
el <- vector()
for (i in 1:15) {
el[i] <- (ran[i]^3) + 12
print(el)
}
# Se almacenan los valores en un data frame
df.al <- data.frame(ran = ran[1:15],
val = el)
View(df.al)
